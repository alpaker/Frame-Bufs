;;; frame-bufs.el --- a minor mode for frame-relative buffer lists

;; Copyright (c) 2011 Alp Aker

;; Author: Alp Aker <alp.tekin.aker@gmail.com>
;; Version: 1.92
;; Keywords: convenience, buffers

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 2 of the
;; License, or (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.

;; A copy of the GNU General Public License can be obtained from the
;; Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
;; MA 02111-1307 USA

;;; Commentary: 

;; Frame-bufs extends Emacs's buffer menu so that it understands a
;; distinction between those buffers that associated with a frame and those
;; that are not.  The buffer menu can be toggled between listing all buffers
;; and listing only those buffers associated with the frame.  Buffers can be
;; added to and removed from the list of associated buffers.  The criteria
;; governing which buffers are automatically associated with a frame can be
;; customized.

;; Frame-bufs does not alter the `buffer-list' or `buried-buffer-list' frame
;; parameters of any frame.  These latter lists record which buffers have
;; been selected on a frame.  Frame-bufs keeps its own record of the buffers
;; associated with each frame; this list can be both manually edited and
;; governed by criteria other than selection.

;; Installation
;; ============

;; Put this file in your load path and put:
;;
;;   (require 'frame-bufs)
;;
;; in your .emacs.  To toggle frame-bufs mode on and off, use the command
;;`frame-bufs-mode'.  To turn it on automatically when starting Emacs, put:
;;
;;  (frame-bufs-mode t) 
;;
;; in your .emacs.  

;; Usage
;; =====

;; Frame-bufs operates fairly transparently.  The buffer menu now has two
;; modes.  In "full-list" mode, it lists all buffers; in "frame-list" mode it
;; lists only those buffers that are associated with the selected frame.  One
;; can toggle between the modes by typing "F".

;; In full-list mode, there is a new fourth column after the initial CRM
;; columns--the `F' column.  Buffers associated with the selected frame are
;; indicated with an `o' in this column.  In frame-list mode, the fourth `F'
;; column is suppressed.  (Full-list/frame-list status is also indicated in
;; the mode line.)

;; The typical way a buffer becomes associated with a frame is by being
;; selected in a window on the frame.  One can manually associate buffers
;; with a frame, and disassociate them as well, using two other new commands
;; in the buffer menu.  By typing `A' a buffer can be marked as to be added
;; to the buffers associated with the selected frame.  By typing `N' a buffer
;; can be marked as to have its association with the selected frame
;; severed.  As with other actions in the buffer menu, these changes take
;; effect when `Buffer-menu-execute' is called.

;; When first called, the buffer menu open in full-list mode.  In subsequent
;; calls it opens in whatever mode it was last in.

;; Criteria That Control Buffer-Frame Association
;; ==============================================

;; The association between buffers and frames is dynamic:  if a buffer is
;; selected on a frame, then it becomes associated with that frame.  Note,
;; then, that a buffer can be associated with more than one frame.

;; In addition, several other variables control which buffers automatically
;; become associated with a frame:

;; o If `frame-bufs-include-displayed-buffers' is non-nil, then buffers that
;;   are merely displayed on a frame become associated with the frame, even
;;   if they have not been selected.

;; o If a buffer's name is a member of `frame-bufs-always-include-names' then
;;   that buffer is automatically associated with every frame.  The default
;;   value is ("*scratch*").

;; o Three variables control which buffers are associated with a newly created
;;   frame:
;;
;;   - `frame-bufs-new-frames-inherit': If non-nil, then the buffers
;;      associated with a new frame include (at least) the buffers that were
;;      associated with the new frame's "parent," i.e., the frame that was
;;      selected when the new frame was created.
;;   - `frame-bufs-include-new-buffers': If non-nil, and the command that
;;      creates a new frame also creates new buffers, the new buffers are
;;      associated with the new frame.  (This applies only to buffers that
;;      are created *after* the new frame is created.)
;;   - `frame-bufs-include-init-buffer':  If non-nil, then the buffer that is
;;      current when a new frame is created will be associated with the new
;;      frame.  If nil, it will not.  (Note that
;;      frame-bufs-new-frames-inherit takes precedence over this
;;      variable.  Also note:  If the buffer in question is displayed on the
;;      new frame when the frame-creating command terminates, it will still
;;      be associated with the new frame.)

;; Other Commands and Features
;; ===========================

;; o If `frame-bufs-use-buffer-predicate' is non-nil, each frame's buffer
;;   predicate is set so that `other-buffer' will prefer buffers associated
;;   with the selected frame.  Thus, when a buffer is removed from a window
;;   and automatically replaced with another (as happens, say, when one kills
;;   a buffer), the newly displayed buffer will, if possible, be another
;;   frame-associated buffer.  The default value of this variable is t.

;; Frame-bufs provides three other commands that are available everywhere,
;; not just in the buffer menu:

;; o `frame-bufs-dismiss-buffer' is somewhat analogous to `bury-buffer'.  It
;;   removes a buffer from the list of buffers associated with a frame, and
;;   if that buffer is displayed in any windows on the selected frame, it is
;;   replaced by another buffer (if `frame-bufs-use-buffer-predicate' is
;;   non-nil, the will be a buffer associated with the selected frame, if
;;   possible).  When called with no arguments, it acts on the current
;;   buffer, severing its association with the selected frame.

;; o `frame-bufs-reset-frame' resets a frame's associated-buffer list;
;;   specifically, it sets the list of associated buffers to the list of
;;   buffers that have been selected on the frame.  When called with no
;;   argument, it acts on the current frame.

;; o `frame-bufs-reset-all-frames' resets the associated buffers of all
;;   frames.

;; By default, none of these commands has a key binding.

;; Other Customization Options
;; ===========================

;; o To rebind the new buffer menu commands, alter their bindings in the
;;   keymap `frame-bufs-mode-map'.

;; o The indicator bit used for frame-associated buffers (default `o') can be
;;   set via the variable `frame-bufs-associated-buffer-bit'.

;; o The strings used to indicate frame-list/full-list state in the buffer
;;   menu's mode line can be changed by setting the variables
;;   `frame-bufs-mode-line-frame-list-string' and
;;   `frame-bufs-mode-line-full-list-string'.  The mode-line indication can
;;   be turned off by setting `frame-bufs-mode-line-indication' to
;;   nil.  (This latter variable can be set to any valid mode-line construct;
;;   users setting this variable to a custom mode-line construct will
;;   probably want to make use of the variable `frame-bufs-full-list'.)

;; Compatibility
;; =============

;; Frame-bufs is compatible with buff-menu+.  It does not affect the
;; operation of `electric-buffer-list'.

;; Using Frame-Bufs in Programs
;; ============================

;; o To use a frame's associated-buffer list from within a Lisp progam, it is
;;   recommended that you work with the list returned by the function
;;   `frame-bufs-buffer-list'; don't use the value of the
;;   frame-bufs-buffer-list frame parameter.  The latter can contain internal
;;   buffers (buffers whose names starts with a space) and dead buffers; it
;;   is not guaranteed to respect `frame-bufs-always-include-names'; and its
;;   order is meaningless.  The list returned by `frame-bufs-buffer-list'
;;   will contain only live, non-internal buffers; be updated to reflect the
;;   current value of frame-bufs-always-include-names; and be sorted
;;   stably by selection order on the current frame.


;; Acknowledgements
;; ============================

;; Thanks to Greg Bognar for alpha testing and to Drew Adams for suggesting
;; many improvements.
